#!/usr/bin/env python3

from functools import lru_cache

data=[1,4,2,4,5,3,5,2,2,5,2,1,2,4,5,2,3,5,4,3,3,1,2,3,2,1,4,4,2,1,1,4,1,4,4,4,1,4,2,4,3,3,3,3,1,1,5,4,2,5,2,4,2,2,3,1,2,5,2,4,1,5,3,5,1,4,5,3,1,4,5,2,4,5,3,1,2,5,1,2,2,1,5,5,1,1,1,4,2,5,4,3,3,1,3,4,1,1,2,2,2,5,4,4,3,2,1,1,1,1,2,5,1,3,2,1,4,4,2,1,4,5,2,5,5,3,3,1,3,2,2,3,4,1,3,1,5,4,2,5,2,4,1,5,1,4,5,1,2,4,4,1,4,1,4,4,2,2,5,4,1,3,1,3,3,1,5,1,5,5,5,1,3,1,2,1,4,5,4,4,1,3,3,1,4,1,2,1,3,2,1,5,5,3,3,1,3,5,1,5,3,5,3,1,1,1,1,4,4,3,5,5,1,1,2,2,5,5,3,2,5,2,3,4,4,1,1,2,2,4,3,5,5,1,1,5,4,3,1,3,1,2,4,4,4,4,1,4,3,4,1,3,5,5,5,1,3,5,4,3,1,3,5,4,4,3,4,2,1,1,3,1,1,2,4,1,4,1,1,1,5,5,1,3,4,1,1,5,4,4,2,2,1,3,4,4,2,2,2,3]

m={'g':'F','f':'E','e':'D','d':'C','c':'B','b':'A','a':'GI','i':'H','h':'G'}
def sim(n):
    p='i'
    for _ in range(n):
        p=''.join(map(m.get,p)).lower()
    return len(p)

@lru_cache(maxsize=None)
def f(n):
    if n<0:
        return 0
    if n<9:
        return 1
    else:
        return 1 + sum(f(n-x) for x in range(9,n+1,7))


def g(n,s):
    return sum(f(n+8-x) for x in s)

for n in range(25):
    print(f'{n}  {sim(n)}  {f(n)}')

print(f'g(18,[3,4,3,1,2])={g(18,[3,4,3,1,2])}')
print(f'g(80,[3,4,3,1,2])={g(80,[3,4,3,1,2])}')

print(f'g(80,data)={g(80,data)}')

print(f'g(256,[3,4,3,1,2])={g(256,[3,4,3,1,2])}')

print(f'g(256,data)={g(256,data)}')

